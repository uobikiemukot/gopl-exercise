// Copyright Â© 2016 Alan A. A. Donovan & Brian W. Kernighan.
// License: https://creativecommons.org/licenses/by-nc-sa/4.0/

// Run with "web" command-line argument for web server.
// See page 13.
//!+main

// Lissajous generates GIF animations of random Lissajous figures.
package main

import (
	"image"
	"image/color"
	"image/gif"
	"io"
	"math"
	"math/rand"
	"os"
)

//!-main
// Packages not needed by version in book.
import (
	"log"
	"net/http"
	"time"
)

//!+main

var palette = []color.Color{
	color.RGBA{0x00, 0x00, 0x00, 0xFF},
	color.RGBA{0x00, 0x00, 0x5F, 0xFF},
	color.RGBA{0x00, 0x00, 0x87, 0xFF},
	color.RGBA{0x00, 0x00, 0xAF, 0xFF},
	color.RGBA{0x00, 0x00, 0xD7, 0xFF},
	color.RGBA{0x00, 0x00, 0xFF, 0xFF},
	color.RGBA{0x00, 0x5F, 0x00, 0xFF},
	color.RGBA{0x00, 0x5F, 0x5F, 0xFF},
	color.RGBA{0x00, 0x5F, 0x87, 0xFF},
	color.RGBA{0x00, 0x5F, 0xAF, 0xFF},
	color.RGBA{0x00, 0x5F, 0xD7, 0xFF},
	color.RGBA{0x00, 0x5F, 0xFF, 0xFF},
	color.RGBA{0x00, 0x87, 0x00, 0xFF},
	color.RGBA{0x00, 0x87, 0x5F, 0xFF},
	color.RGBA{0x00, 0x87, 0x87, 0xFF},
	color.RGBA{0x00, 0x87, 0xAF, 0xFF},
	color.RGBA{0x00, 0x87, 0xD7, 0xFF},
	color.RGBA{0x00, 0x87, 0xFF, 0xFF},
	color.RGBA{0x00, 0xAF, 0x00, 0xFF},
	color.RGBA{0x00, 0xAF, 0x5F, 0xFF},
	color.RGBA{0x00, 0xAF, 0x87, 0xFF},
	color.RGBA{0x00, 0xAF, 0xAF, 0xFF},
	color.RGBA{0x00, 0xAF, 0xD7, 0xFF},
	color.RGBA{0x00, 0xAF, 0xFF, 0xFF},
	color.RGBA{0x00, 0xD7, 0x00, 0xFF},
	color.RGBA{0x00, 0xD7, 0x5F, 0xFF},
	color.RGBA{0x00, 0xD7, 0x87, 0xFF},
	color.RGBA{0x00, 0xD7, 0xAF, 0xFF},
	color.RGBA{0x00, 0xD7, 0xD7, 0xFF},
	color.RGBA{0x00, 0xD7, 0xFF, 0xFF},
	color.RGBA{0x00, 0xFF, 0x00, 0xFF},
	color.RGBA{0x00, 0xFF, 0x5F, 0xFF},
	color.RGBA{0x00, 0xFF, 0x87, 0xFF},
	color.RGBA{0x00, 0xFF, 0xAF, 0xFF},
	color.RGBA{0x00, 0xFF, 0xD7, 0xFF},
	color.RGBA{0x00, 0xFF, 0xFF, 0xFF},
	color.RGBA{0x5F, 0x00, 0x00, 0xFF},
	color.RGBA{0x5F, 0x00, 0x5F, 0xFF},
	color.RGBA{0x5F, 0x00, 0x87, 0xFF},
	color.RGBA{0x5F, 0x00, 0xAF, 0xFF},
	color.RGBA{0x5F, 0x00, 0xD7, 0xFF},
	color.RGBA{0x5F, 0x00, 0xFF, 0xFF},
	color.RGBA{0x5F, 0x5F, 0x00, 0xFF},
	color.RGBA{0x5F, 0x5F, 0x5F, 0xFF},
	color.RGBA{0x5F, 0x5F, 0x87, 0xFF},
	color.RGBA{0x5F, 0x5F, 0xAF, 0xFF},
	color.RGBA{0x5F, 0x5F, 0xD7, 0xFF},
	color.RGBA{0x5F, 0x5F, 0xFF, 0xFF},
	color.RGBA{0x5F, 0x87, 0x00, 0xFF},
	color.RGBA{0x5F, 0x87, 0x5F, 0xFF},
	color.RGBA{0x5F, 0x87, 0x87, 0xFF},
	color.RGBA{0x5F, 0x87, 0xAF, 0xFF},
	color.RGBA{0x5F, 0x87, 0xD7, 0xFF},
	color.RGBA{0x5F, 0x87, 0xFF, 0xFF},
	color.RGBA{0x5F, 0xAF, 0x00, 0xFF},
	color.RGBA{0x5F, 0xAF, 0x5F, 0xFF},
	color.RGBA{0x5F, 0xAF, 0x87, 0xFF},
	color.RGBA{0x5F, 0xAF, 0xAF, 0xFF},
	color.RGBA{0x5F, 0xAF, 0xD7, 0xFF},
	color.RGBA{0x5F, 0xAF, 0xFF, 0xFF},
	color.RGBA{0x5F, 0xD7, 0x00, 0xFF},
	color.RGBA{0x5F, 0xD7, 0x5F, 0xFF},
	color.RGBA{0x5F, 0xD7, 0x87, 0xFF},
	color.RGBA{0x5F, 0xD7, 0xAF, 0xFF},
	color.RGBA{0x5F, 0xD7, 0xD7, 0xFF},
	color.RGBA{0x5F, 0xD7, 0xFF, 0xFF},
	color.RGBA{0x5F, 0xFF, 0x00, 0xFF},
	color.RGBA{0x5F, 0xFF, 0x5F, 0xFF},
	color.RGBA{0x5F, 0xFF, 0x87, 0xFF},
	color.RGBA{0x5F, 0xFF, 0xAF, 0xFF},
	color.RGBA{0x5F, 0xFF, 0xD7, 0xFF},
	color.RGBA{0x5F, 0xFF, 0xFF, 0xFF},
	color.RGBA{0x87, 0x00, 0x00, 0xFF},
	color.RGBA{0x87, 0x00, 0x5F, 0xFF},
	color.RGBA{0x87, 0x00, 0x87, 0xFF},
	color.RGBA{0x87, 0x00, 0xAF, 0xFF},
	color.RGBA{0x87, 0x00, 0xD7, 0xFF},
	color.RGBA{0x87, 0x00, 0xFF, 0xFF},
	color.RGBA{0x87, 0x5F, 0x00, 0xFF},
	color.RGBA{0x87, 0x5F, 0x5F, 0xFF},
	color.RGBA{0x87, 0x5F, 0x87, 0xFF},
	color.RGBA{0x87, 0x5F, 0xAF, 0xFF},
	color.RGBA{0x87, 0x5F, 0xD7, 0xFF},
	color.RGBA{0x87, 0x5F, 0xFF, 0xFF},
	color.RGBA{0x87, 0x87, 0x00, 0xFF},
	color.RGBA{0x87, 0x87, 0x5F, 0xFF},
	color.RGBA{0x87, 0x87, 0x87, 0xFF},
	color.RGBA{0x87, 0x87, 0xAF, 0xFF},
	color.RGBA{0x87, 0x87, 0xD7, 0xFF},
	color.RGBA{0x87, 0x87, 0xFF, 0xFF},
	color.RGBA{0x87, 0xAF, 0x00, 0xFF},
	color.RGBA{0x87, 0xAF, 0x5F, 0xFF},
	color.RGBA{0x87, 0xAF, 0x87, 0xFF},
	color.RGBA{0x87, 0xAF, 0xAF, 0xFF},
	color.RGBA{0x87, 0xAF, 0xD7, 0xFF},
	color.RGBA{0x87, 0xAF, 0xFF, 0xFF},
	color.RGBA{0x87, 0xD7, 0x00, 0xFF},
	color.RGBA{0x87, 0xD7, 0x5F, 0xFF},
	color.RGBA{0x87, 0xD7, 0x87, 0xFF},
	color.RGBA{0x87, 0xD7, 0xAF, 0xFF},
	color.RGBA{0x87, 0xD7, 0xD7, 0xFF},
	color.RGBA{0x87, 0xD7, 0xFF, 0xFF},
	color.RGBA{0x87, 0xFF, 0x00, 0xFF},
	color.RGBA{0x87, 0xFF, 0x5F, 0xFF},
	color.RGBA{0x87, 0xFF, 0x87, 0xFF},
	color.RGBA{0x87, 0xFF, 0xAF, 0xFF},
	color.RGBA{0x87, 0xFF, 0xD7, 0xFF},
	color.RGBA{0x87, 0xFF, 0xFF, 0xFF},
	color.RGBA{0xAF, 0x00, 0x00, 0xFF},
	color.RGBA{0xAF, 0x00, 0x5F, 0xFF},
	color.RGBA{0xAF, 0x00, 0x87, 0xFF},
	color.RGBA{0xAF, 0x00, 0xAF, 0xFF},
	color.RGBA{0xAF, 0x00, 0xD7, 0xFF},
	color.RGBA{0xAF, 0x00, 0xFF, 0xFF},
	color.RGBA{0xAF, 0x5F, 0x00, 0xFF},
	color.RGBA{0xAF, 0x5F, 0x5F, 0xFF},
	color.RGBA{0xAF, 0x5F, 0x87, 0xFF},
	color.RGBA{0xAF, 0x5F, 0xAF, 0xFF},
	color.RGBA{0xAF, 0x5F, 0xD7, 0xFF},
	color.RGBA{0xAF, 0x5F, 0xFF, 0xFF},
	color.RGBA{0xAF, 0x87, 0x00, 0xFF},
	color.RGBA{0xAF, 0x87, 0x5F, 0xFF},
	color.RGBA{0xAF, 0x87, 0x87, 0xFF},
	color.RGBA{0xAF, 0x87, 0xAF, 0xFF},
	color.RGBA{0xAF, 0x87, 0xD7, 0xFF},
	color.RGBA{0xAF, 0x87, 0xFF, 0xFF},
	color.RGBA{0xAF, 0xAF, 0x00, 0xFF},
	color.RGBA{0xAF, 0xAF, 0x5F, 0xFF},
	color.RGBA{0xAF, 0xAF, 0x87, 0xFF},
	color.RGBA{0xAF, 0xAF, 0xAF, 0xFF},
	color.RGBA{0xAF, 0xAF, 0xD7, 0xFF},
	color.RGBA{0xAF, 0xAF, 0xFF, 0xFF},
	color.RGBA{0xAF, 0xD7, 0x00, 0xFF},
	color.RGBA{0xAF, 0xD7, 0x5F, 0xFF},
	color.RGBA{0xAF, 0xD7, 0x87, 0xFF},
	color.RGBA{0xAF, 0xD7, 0xAF, 0xFF},
	color.RGBA{0xAF, 0xD7, 0xD7, 0xFF},
	color.RGBA{0xAF, 0xD7, 0xFF, 0xFF},
	color.RGBA{0xAF, 0xFF, 0x00, 0xFF},
	color.RGBA{0xAF, 0xFF, 0x5F, 0xFF},
	color.RGBA{0xAF, 0xFF, 0x87, 0xFF},
	color.RGBA{0xAF, 0xFF, 0xAF, 0xFF},
	color.RGBA{0xAF, 0xFF, 0xD7, 0xFF},
	color.RGBA{0xAF, 0xFF, 0xFF, 0xFF},
	color.RGBA{0xD7, 0x00, 0x00, 0xFF},
	color.RGBA{0xD7, 0x00, 0x5F, 0xFF},
	color.RGBA{0xD7, 0x00, 0x87, 0xFF},
	color.RGBA{0xD7, 0x00, 0xAF, 0xFF},
	color.RGBA{0xD7, 0x00, 0xD7, 0xFF},
	color.RGBA{0xD7, 0x00, 0xFF, 0xFF},
	color.RGBA{0xD7, 0x5F, 0x00, 0xFF},
	color.RGBA{0xD7, 0x5F, 0x5F, 0xFF},
	color.RGBA{0xD7, 0x5F, 0x87, 0xFF},
	color.RGBA{0xD7, 0x5F, 0xAF, 0xFF},
	color.RGBA{0xD7, 0x5F, 0xD7, 0xFF},
	color.RGBA{0xD7, 0x5F, 0xFF, 0xFF},
	color.RGBA{0xD7, 0x87, 0x00, 0xFF},
	color.RGBA{0xD7, 0x87, 0x5F, 0xFF},
	color.RGBA{0xD7, 0x87, 0x87, 0xFF},
	color.RGBA{0xD7, 0x87, 0xAF, 0xFF},
	color.RGBA{0xD7, 0x87, 0xD7, 0xFF},
	color.RGBA{0xD7, 0x87, 0xFF, 0xFF},
	color.RGBA{0xD7, 0xAF, 0x00, 0xFF},
	color.RGBA{0xD7, 0xAF, 0x5F, 0xFF},
	color.RGBA{0xD7, 0xAF, 0x87, 0xFF},
	color.RGBA{0xD7, 0xAF, 0xAF, 0xFF},
	color.RGBA{0xD7, 0xAF, 0xD7, 0xFF},
	color.RGBA{0xD7, 0xAF, 0xFF, 0xFF},
	color.RGBA{0xD7, 0xD7, 0x00, 0xFF},
	color.RGBA{0xD7, 0xD7, 0x5F, 0xFF},
	color.RGBA{0xD7, 0xD7, 0x87, 0xFF},
	color.RGBA{0xD7, 0xD7, 0xAF, 0xFF},
	color.RGBA{0xD7, 0xD7, 0xD7, 0xFF},
	color.RGBA{0xD7, 0xD7, 0xFF, 0xFF},
	color.RGBA{0xD7, 0xFF, 0x00, 0xFF},
	color.RGBA{0xD7, 0xFF, 0x5F, 0xFF},
	color.RGBA{0xD7, 0xFF, 0x87, 0xFF},
	color.RGBA{0xD7, 0xFF, 0xAF, 0xFF},
	color.RGBA{0xD7, 0xFF, 0xD7, 0xFF},
	color.RGBA{0xD7, 0xFF, 0xFF, 0xFF},
	color.RGBA{0xFF, 0x00, 0x00, 0xFF},
	color.RGBA{0xFF, 0x00, 0x5F, 0xFF},
	color.RGBA{0xFF, 0x00, 0x87, 0xFF},
	color.RGBA{0xFF, 0x00, 0xAF, 0xFF},
	color.RGBA{0xFF, 0x00, 0xD7, 0xFF},
	color.RGBA{0xFF, 0x00, 0xFF, 0xFF},
	color.RGBA{0xFF, 0x5F, 0x00, 0xFF},
	color.RGBA{0xFF, 0x5F, 0x5F, 0xFF},
	color.RGBA{0xFF, 0x5F, 0x87, 0xFF},
	color.RGBA{0xFF, 0x5F, 0xAF, 0xFF},
	color.RGBA{0xFF, 0x5F, 0xD7, 0xFF},
	color.RGBA{0xFF, 0x5F, 0xFF, 0xFF},
	color.RGBA{0xFF, 0x87, 0x00, 0xFF},
	color.RGBA{0xFF, 0x87, 0x5F, 0xFF},
	color.RGBA{0xFF, 0x87, 0x87, 0xFF},
	color.RGBA{0xFF, 0x87, 0xAF, 0xFF},
	color.RGBA{0xFF, 0x87, 0xD7, 0xFF},
	color.RGBA{0xFF, 0x87, 0xFF, 0xFF},
	color.RGBA{0xFF, 0xAF, 0x00, 0xFF},
	color.RGBA{0xFF, 0xAF, 0x5F, 0xFF},
	color.RGBA{0xFF, 0xAF, 0x87, 0xFF},
	color.RGBA{0xFF, 0xAF, 0xAF, 0xFF},
	color.RGBA{0xFF, 0xAF, 0xD7, 0xFF},
	color.RGBA{0xFF, 0xAF, 0xFF, 0xFF},
	color.RGBA{0xFF, 0xD7, 0x00, 0xFF},
	color.RGBA{0xFF, 0xD7, 0x5F, 0xFF},
	color.RGBA{0xFF, 0xD7, 0x87, 0xFF},
	color.RGBA{0xFF, 0xD7, 0xAF, 0xFF},
	color.RGBA{0xFF, 0xD7, 0xD7, 0xFF},
	color.RGBA{0xFF, 0xD7, 0xFF, 0xFF},
	color.RGBA{0xFF, 0xFF, 0x00, 0xFF},
	color.RGBA{0xFF, 0xFF, 0x5F, 0xFF},
	color.RGBA{0xFF, 0xFF, 0x87, 0xFF},
	color.RGBA{0xFF, 0xFF, 0xAF, 0xFF},
	color.RGBA{0xFF, 0xFF, 0xD7, 0xFF},
	color.RGBA{0xFF, 0xFF, 0xFF, 0xFF},
}

const (
	Grey0_16 = iota
	NavyBlue_17
	DarkBlue_18
	Blue3_19
	Blue3_20
	Blue1_21
	DarkGreen_22
	DeepSkyBlue4_23
	DeepSkyBlue4_24
	DeepSkyBlue4_25
	DodgerBlue3_26
	DodgerBlue2_27
	Green4_28
	SpringGreen4_29
	Turquoise4_30
	DeepSkyBlue3_31
	DeepSkyBlue3_32
	DodgerBlue1_33
	Green3_34
	SpringGreen3_35
	DarkCyan_36
	LightSeaGreen_37
	DeepSkyBlue2_38
	DeepSkyBlue1_39
	Green3_40
	SpringGreen3_41
	SpringGreen2_42
	Cyan3_43
	DarkTurquoise_44
	Turquoise2_45
	Green1_46
	SpringGreen2_47
	SpringGreen1_48
	MediumSpringGreen_49
	Cyan2_50
	Cyan1_51
	DarkRed_52
	DeepPink4_53
	Purple4_54
	Purple4_55
	Purple3_56
	BlueViolet_57
	Orange4_58
	Grey37_59
	MediumPurple4_60
	SlateBlue3_61
	SlateBlue3_62
	RoyalBlue1_63
	Chartreuse4_64
	DarkSeaGreen4_65
	PaleTurquoise4_66
	SteelBlue_67
	SteelBlue3_68
	CornflowerBlue_69
	Chartreuse3_70
	DarkSeaGreen4_71
	CadetBlue_72
	CadetBlue_73
	SkyBlue3_74
	SteelBlue1_75
	Chartreuse3_76
	PaleGreen3_77
	SeaGreen3_78
	Aquamarine3_79
	MediumTurquoise_80
	SteelBlue1_81
	Chartreuse2_82
	SeaGreen2_83
	SeaGreen1_84
	SeaGreen1_85
	Aquamarine1_86
	DarkSlateGray2_87
	DarkRed_88
	DeepPink4_89
	DarkMagenta_90
	DarkMagenta_91
	DarkViolet_92
	Purple_93
	Orange4_94
	LightPink4_95
	Plum4_96
	MediumPurple3_97
	MediumPurple3_98
	SlateBlue1_99
	Yellow4_100
	Wheat4_101
	Grey53_102
	LightSlateGrey_103
	MediumPurple_104
	LightSlateBlue_105
	Yellow4_106
	DarkOliveGreen3_107
	DarkSeaGreen_108
	LightSkyBlue3_109
	LightSkyBlue3_110
	SkyBlue2_111
	Chartreuse2_112
	DarkOliveGreen3_113
	PaleGreen3_114
	DarkSeaGreen3_115
	DarkSlateGray3_116
	SkyBlue1_117
	Chartreuse1_118
	LightGreen_119
	LightGreen_120
	PaleGreen1_121
	Aquamarine1_122
	DarkSlateGray1_123
	Red3_124
	DeepPink4_125
	MediumVioletRed_126
	Magenta3_127
	DarkViolet_128
	Purple_129
	DarkOrange3_130
	IndianRed_131
	HotPink3_132
	MediumOrchid3_133
	MediumOrchid_134
	MediumPurple2_135
	DarkGoldenrod_136
	LightSalmon3_137
	RosyBrown_138
	Grey63_139
	MediumPurple2_140
	MediumPurple1_141
	Gold3_142
	DarkKhaki_143
	NavajoWhite3_144
	Grey69_145
	LightSteelBlue3_146
	LightSteelBlue_147
	Yellow3_148
	DarkOliveGreen3_149
	DarkSeaGreen3_150
	DarkSeaGreen2_151
	LightCyan3_152
	LightSkyBlue1_153
	GreenYellow_154
	DarkOliveGreen2_155
	PaleGreen1_156
	DarkSeaGreen2_157
	DarkSeaGreen1_158
	PaleTurquoise1_159
	Red3_160
	DeepPink3_161
	DeepPink3_162
	Magenta3_163
	Magenta3_164
	Magenta2_165
	DarkOrange3_166
	IndianRed_167
	HotPink3_168
	HotPink2_169
	Orchid_170
	MediumOrchid1_171
	Orange3_172
	LightSalmon3_173
	LightPink3_174
	Pink3_175
	Plum3_176
	Violet_177
	Gold3_178
	LightGoldenrod3_179
	Tan_180
	MistyRose3_181
	Thistle3_182
	Plum2_183
	Yellow3_184
	Khaki3_185
	LightGoldenrod2_186
	LightYellow3_187
	Grey84_188
	LightSteelBlue1_189
	Yellow2_190
	DarkOliveGreen1_191
	DarkOliveGreen1_192
	DarkSeaGreen1_193
	Honeydew2_194
	LightCyan1_195
	Red1_196
	DeepPink2_197
	DeepPink1_198
	DeepPink1_199
	Magenta2_200
	Magenta1_201
	OrangeRed1_202
	IndianRed1_203
	IndianRed1_204
	HotPink_205
	HotPink_206
	MediumOrchid1_207
	DarkOrange_208
	Salmon1_209
	LightCoral_210
	PaleVioletRed1_211
	Orchid2_212
	Orchid1_213
	Orange1_214
	SandyBrown_215
	LightSalmon1_216
	LightPink1_217
	Pink1_218
	Plum1_219
	Gold1_220
	LightGoldenrod2_221
	LightGoldenrod2_222
	NavajoWhite1_223
	MistyRose1_224
	Thistle1_225
	Yellow1_226
	LightGoldenrod1_227
	Khaki1_228
	Wheat1_229
	Cornsilk1_230
	Grey100_231
)

func main() {
	//!-main
	// The sequence of images is deterministic unless we seed
	// the pseudo-random number generator using the current time.
	// Thanks to Randall McPherson for pointing out the omission.
	rand.Seed(time.Now().UTC().UnixNano())

	if len(os.Args) > 1 && os.Args[1] == "web" {
		//!+http
		handler := func(w http.ResponseWriter, r *http.Request) {
			lissajous(w)
		}
		http.HandleFunc("/", handler)
		//!-http
		log.Fatal(http.ListenAndServe("localhost:8000", nil))
		return
	}
	//!+main
	lissajous(os.Stdout)
}

func lissajous(out io.Writer) {
	const (
		cycles  = 5     // number of complete x oscillator revolutions
		res     = 0.001 // angular resolution
		size    = 100   // image canvas covers [-size..+size]
		nframes = 64    // number of animation frames
		delay   = 8     // delay between frames in 10ms units
	)
	freq := rand.Float64() * 3.0 // relative frequency of y oscillator
	anim := gif.GIF{LoopCount: nframes}
	phase := 0.0 // phase difference
	maxIndex := uint8(len(palette))
	for i := 0; i < nframes; i++ {
		rect := image.Rect(0, 0, 2*size+1, 2*size+1)
		img := image.NewPaletted(rect, palette)
		for t := 0.0; t < cycles*2*math.Pi; t += res {
			x := math.Sin(t)
			y := math.Sin(t*freq + phase)
			img.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5), uint8((x+y)*128+t*128)%maxIndex)
		}
		phase += 0.1
		anim.Delay = append(anim.Delay, delay)
		anim.Image = append(anim.Image, img)
	}
	gif.EncodeAll(out, &anim) // NOTE: ignoring encoding errors
}

//!-main
